within NHES.Media.Solids;
package NASAGlenn
  import ustr = Modelica.Utilities.Strings;

  package NASA_Utilities
    extends Modelica.Icons.UtilitiesPackage;

    function cp_T
      extends Modelica.Icons.Function;
      input Temperature T;
      input Interfaces.Types.SolidConstants sc;
      output SpecificHeatCapacity cp;
    protected
      Integer n_i=get_n_i(T, sc);
    algorithm
        cp := ({T^(-2),T^(-1),1,T,T^2,T^3,T^4}*sc.a[n_i, :])*sc.R_m;
      annotation (Inline=true, smoothOrder=2);
    end cp_T;

    function h_T
      extends Modelica.Icons.Function;
      input Temperature T;
      input Common.single_species_data sc;
      output SpecificEnthalpy h;
    protected
      Integer n_i=get_n_i(T, sc);
    algorithm
        h := ({-T^(-2),Modelica.Math.log(T)/T,1,T/2,(T^2)/3,(T^3)/4,(T^4)/5,1/T}*cat(
              1,
              sc.a[n_i, :],
              {sc.b[n_i, 1]}))*sc.R_m*T;
      annotation (Inline=true, smoothOrder=2);
    end h_T;

    function s_T
      extends Modelica.Icons.Function;
      input Temperature T;
      input Interfaces.Types.SolidConstants sc;
      output SpecificEntropy s;
    protected
      Integer n_i=get_n_i(T, sc);
    algorithm
        s := ({-(T^(-2))/2,-T^(-1),Modelica.Math.log(T),T,(T^2)/2,(T^3)/3,(T^4)/4,1}*
        cat(  1,
              sc.a[n_i, :],
              {sc.b[n_i, 2]}))*sc.R_m;
      annotation (Inline=true, smoothOrder=2);
    end s_T;

    function get_n_i
      extends Modelica.Icons.Function;
      input Temperature T;
      input Common.single_species_data ssd;
      output Integer n_i;
    protected
      Integer i=1;
    algorithm
      if ssd.n == 1 then
        n_i := ssd.n;
      else
        while (T < ssd.T_lims[i, 1]) or (T >= ssd.T_lims[i, 2]) loop
          i := i + 1;
        end while;
      end if;
      n_i := i;
    end get_n_i;

  end NASA_Utilities;

  package SolidSpecies
    extends Modelica.Icons.VariantsPackage;
    package Solid_Base
      extends Interfaces.PartialSolidMedium(mediumName="none");

      redeclare record extends ThermodynamicState
        "Thermodynamic state"
        Temperature T "Temperature";
      end ThermodynamicState;
      constant MyMedia.Interfaces.Types.SolidConstants ssd;

      redeclare replaceable model extends BaseProperties(T)
      equation
        MM = ssd.MW;
        R = ssd.R_m;
        T = state.T;
        h = specificEnthalpy(state);
        d = ssd.rho;
      end BaseProperties;

      redeclare function extends molarMass
      algorithm
        MM := ssd.MW;
      end molarMass;

      redeclare function extends specificEnthalpyOfFormation_298_15
      algorithm
        h_f :=ssd.h_f_298_15/ssd.MW;
      end specificEnthalpyOfFormation_298_15;

      redeclare function specificEnthalpy_T
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SpecificEnthalpy h;
      algorithm
        h := NASA_Utilities.h_T(T, ssd);
        annotation (Inline=true);
      end specificEnthalpy_T;

      redeclare function specificEntropy_T
        extends Modelica.Icons.Function;
        input Temperature T "Temperature";
        output SpecificEntropy s;
      algorithm
        s := NASA_Utilities.s_T(T, ssd);
        annotation (Inline=true);
      end specificEntropy_T;

      redeclare function extends thermalConductivity
      algorithm
        lambda := ssd.k;
      end thermalConductivity;

      redeclare function extends temperature
      algorithm
        T := state.T;
        annotation (Inline=true);
      end temperature;

      redeclare function extends density
      algorithm
        d := ssd.rho;
      end density;

      redeclare function extends specificEnthalpy
      algorithm
        h := specificEnthalpy_T(state.T);
        annotation (Inline=true);
      end specificEnthalpy;

      redeclare function extends specificGibbsEnergy
      algorithm
        g := specificEnthalpy(state) - state.T*specificEntropy(state);
        annotation (Inline=true);
      end specificGibbsEnergy;

      redeclare function extends specificEntropy
      algorithm
        s := specificEntropy_T(state.T);
        annotation (Inline=true);
      end specificEntropy;

      redeclare function extends specificHeatCapacityCp
      algorithm
        cp := NASA_Utilities.cp_T(state.T, ssd);
        annotation (Inline=true);
      end specificHeatCapacityCp;

      redeclare function extends specificHeatCapacityCv
      algorithm
        cv := NASA_Utilities.cp_T(state.T, ssd);
        annotation (Inline=true);
      end specificHeatCapacityCv;

      redeclare function extends setState_T
      algorithm
        state := ThermodynamicState(T);
        annotation (Inline=true);
      end setState_T;
    end Solid_Base;

    package CalciumHydroxide
      extends Solid_Base(mediumName="Ca(OH)2(cr)", ssd=NASAConstRet.Ca_OH_2_cr_);
    end CalciumHydroxide;

    package CalciumOxide
      extends Solid_Base(mediumName="CaO(cr)", ssd=NASAConstRet.CaO_cr_);
    end CalciumOxide;
  end SolidSpecies;

  package NASAConstRet
    import SGD = Modelica.Media.IdealGases.Common.SingleGasesData;

    constant Interfaces.Types.SolidConstants none(
      chem="none",
      rho=0,
      k=0,
      r=0,
      n=1,
      MW=1e-9,
      h_f_298_15=0,
      a=[0,0,0,0,0,0,0],
      b=[0,0],
      T_lims=[0,1]);

    constant Interfaces.Types.SolidConstants Ca_OH_2_cr_(
      chem="Ca(OH)2(cr)",
      rho=2211,
      k=0.1,
      r=10457,
      n=2,
      MW=0.07409268000000001,
      h_f_298_15=-985900.0,
      a=[-205883.8935,6172.55449,-74.9975099,0.50121824,-0.001423348682,1.994984415E-06,
          -1.095038067E-09; -124541.3139,0.0,10.73593032,0.003982435525,0.0,0.0,
          0.0],
      b=[-145202.6205,355.244504; -122370.7243,-53.0239539],
      T_lims=[100.0,500.0007; 500.0,1023.0007]);
                         //Fix this later, somehow combine Ca(a) and Ca(b)

    constant Interfaces.Types.SolidConstants CaO_cr_(
      chem="CaO(cr)",
      rho=1656,
      k=0.318,
      r=10444,
      n=2,
      MW=0.0560774,
      h_f_298_15=-634920.0,
      a=[-4775526.94,90377.1142,-694.432081,2.802477174,-0.00612940322,6.9821678E-06,
          -3.24754384E-09; -145937.644,0.0,7.174205094,-0.001959947129,1.291116374E-06,
          -2.077091735E-10,0.0],
      b=[-482941.143,3619.04632; -78915.2508,-36.58562837],
      T_lims=[200.0,500.0007; 500.0,3172.0007]);

    constant Interfaces.Types.LiquidConstants H2O_L_(
      chem = "H2O(L)",
      rho = 1000,
      k = 0.0,
      r = 11035,
      n = 1,
      MW = 0.01801528,
      h_f_298_15 = -285830.0,
      a=
      [87212378.1, -1390875.11, 9157.29532, -31.7596351, 0.0613885076,
        -6.26798865E-05, 2.64536349E-08],
      b=
      [6433165.23, -49098.5319],
      T_lims=
      [273.15, 600.0007]);

    constant Interfaces.Types.SolidConstants Ca_cr_(
      chem = "Ca_cr_",
      rho = 0.0,
      k = 0.0,
      r = 10341,
      n = 3,
      R_U = 8.31451,
      MW = 0.040078,
      R_m = 207.4582064973302,
      h_f_298_15 = 0.0,
      a=
      [-838564.472, 17652.8605, -146.459817, 0.631616674, -0.00132921936, 1.11775658E-06, 0.0;
      -626229.648, 8185.56583, -40.6398669, 0.120386393, -0.000180184335, 1.4431771E-07, -4.73132858E-11;
      0.0, 0.0, 5.70111768, -0.0058105649, 4.02212518e-6, 0.0, 0.0],
      b=
      [-78262.8469, 754.964272;
      -40643.4046, 231.53155;
      -1516.73911, -26.075719],
      T_lims=
      [200.0, 298.1507;
      298.15, 716.0007;
      716.0, 1115.0007]);
  end NASAConstRet;
end NASAGlenn;

within NHES.Math;
package Interpolation
  "Bilinear and Trilinear interpolation functions for use with arrays"
  function BilinearInterp
    input Real x;
    input Real y;
    input PropTable_2 I;
    output Real C;
  protected
    TableSolverVars_2 T;
  algorithm
    T.x_i := Media.Common.FindIndexI(x, I.pr_1);
    T.y_i := Media.Common.FindIndexI(y, I.pr_2);
    T.x_ul := {I.pr_1[T.x_i[1]],I.pr_1[T.x_i[2]]};
    T.y_ul := {I.pr_2[T.y_i[1]],I.pr_2[T.y_i[2]]};
    T.xm := {T.x_ul[1],T.x_ul[1],T.x_ul[2],T.x_ul[2]};
    T.ym := {T.y_ul[1],T.y_ul[2],T.y_ul[1],T.y_ul[2]};
    T.xy := transpose({ones(4),T.xm,T.ym,T.xm .* T.ym});
    T.c := {I.table[T.x_i[1], T.y_i[1]],I.table[T.x_i[1], T.y_i[2]],I.table[T.x_i[
      2], T.y_i[1]],I.table[T.x_i[2], T.y_i[2]]};
    T.a := Modelica.Math.Matrices.solve(T.xy, T.c);
    C := T.a*{1,x,y,x*y};
  end BilinearInterp;

  record PropTable_2 "Generic 2D property table"
    Real[:,:] table;
    Real[:] pr_1;
    Real[:] pr_2;
  end PropTable_2;

  record PropTable_3 "Generic 3D property table"
    Real[:,:,:] table;
    Real[:] pr_1;
    Real[:] pr_2;
    Real[:] pr_3;
  end PropTable_3;

  record TableSolverVars_2 "Iterative solver algorithm matricies"
    Real[2] x_ul;
    Real[2] y_ul;
    Integer[2] x_i;
    Integer[2] y_i;
    Real[4] xm;
    Real[4] ym;
    Real[4] zm;
    Real[4,4] xy;
    Real[4] a;
    Real[4] c;
  end TableSolverVars_2;

  record TableSolverVars_3 "Iterative solver algorithm matricies"
    Real[2] x_ul;
    Real[2] y_ul;
    Real[2] z_ul;
    Integer[2] x_i;
    Integer[2] y_i;
    Integer[2] z_i;
    Real[8] xm;
    Real[8] ym;
    Real[8] zm;
    Real[8,8] xyz;
    Real[8] a;
    Real[8] c;
  end TableSolverVars_3;

  function TrilinearInterp
    input Real x;
    input Real y;
    input Real z;
    input Math.Interpolation.PropTable_3 I;
    output Real C;
  protected
    Math.Interpolation.TableSolverVars_3 T;
  algorithm
    T.x_i := Media.Common.FindIndexI(x, I.pr_1);
    T.y_i := Media.Common.FindIndexI(y, I.pr_2);
    T.z_i := Media.Common.FindIndexI(z, I.pr_3);
    T.x_ul := {I.pr_1[T.x_i[1]],I.pr_1[T.x_i[2]]};
    T.y_ul := {I.pr_2[T.y_i[1]],I.pr_2[T.y_i[2]]};
    T.z_ul := {I.pr_3[T.z_i[1]],I.pr_3[T.z_i[2]]};
    T.xm := {T.x_ul[1],T.x_ul[2],T.x_ul[1],T.x_ul[2],T.x_ul[1],T.x_ul[2],T.x_ul[
      1],T.x_ul[2]};
    T.ym := {T.y_ul[1],T.y_ul[1],T.y_ul[2],T.y_ul[2],T.y_ul[1],T.y_ul[1],T.y_ul[
      2],T.y_ul[2]};
    T.zm := {T.z_ul[1],T.z_ul[1],T.z_ul[1],T.z_ul[1],T.z_ul[2],T.z_ul[2],T.z_ul[
      2],T.z_ul[2]};

    T.xyz := transpose({ones(8),T.xm,T.ym,T.zm,T.xm .* T.ym,T.xm .* T.zm,T.ym .*
      T.zm,T.xm .* T.ym .* T.zm});

    T.c := {I.table[T.x_i[1], T.y_i[1], T.z_i[1]],I.table[T.x_i[2], T.y_i[1],
      T.z_i[1]],I.table[T.x_i[1], T.y_i[2], T.z_i[1]],I.table[T.x_i[2], T.y_i[
      2], T.z_i[1]],I.table[T.x_i[1], T.y_i[1], T.z_i[2]],I.table[T.x_i[2], T.y_i[
      1], T.z_i[2]],I.table[T.x_i[1], T.y_i[2], T.z_i[2]],I.table[T.x_i[2], T.y_i[
      2], T.z_i[2]]};
    T.a := Modelica.Math.Matrices.solve(T.xyz, T.c);
    C := T.a*{1,x,y,z,x*y,x*z,y*z,x*y*z};
  end TrilinearInterp;
end Interpolation;
